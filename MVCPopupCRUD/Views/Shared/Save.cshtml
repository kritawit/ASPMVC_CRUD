@model MVCPopupCRUD.Contact
@using (Html.BeginForm("Save", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "saveForm" }))
{

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="form-group">
        @Html.HiddenFor(model => model.ContactID)
        @Html.LabelFor(model => model.ContactPerson, new { @class = "control-label col-lg-3" })
        <div class="col-lg-4">
            @Html.TextBoxFor(model => model.ContactPerson, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ContactNo, new { @class = "control-label col-lg-3" })
        <div class="col-lg-4">
            @Html.TextBoxFor(model => model.ContactNo, new { @class = "form-control", data_error = "Contact No, is invalid" })
            <div class="help-block with-errors"></div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.CountryID, new { @class = "control-label col-lg-3" })
        <div class="col-lg-4">
            @Html.DropDownListFor(model => model.CountryID, ViewBag.Countries as SelectList, "Select Country", new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StateID, new { @class = "control-label col-lg-3" })
        <div class="col-lg-4">
            @Html.DropDownListFor(model => model.StateID, ViewBag.Countries as SelectList, "Select State", new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-lg-6 col-lg-offset-3">
            <button type="submit" class="btn btn-success">Submit</button>
            @Html.ActionLink("Back To List", "Index", null, new { @class = "btn btn-default" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-lg-6 col-md-offset-3">
            <div id="messages"></div>
        </div>
    </div>

}

<script>
    $(document).ready(function () {


        $('#saveForm').bootstrapValidator({
            container: '#messages',
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                ContactPerson: {
                    validators: {
                        notEmpty: {
                            message: 'The contact person is required and cannot be empty'
                        }
                    }
                },
                ContactNo: {
                    validators: {
                        notEmpty: {
                            message: 'The contact no is required and cannot be empty'
                        }
                    }
                },
                CountryID: {
                    validators: {
                        notEmpty: {
                            message: 'The country no is required and cannot be empty'
                        }
                    }
                },
                StateID: {
                    validators: {
                        notEmpty: {
                            message: 'The state no is required and cannot be empty'
                        }
                    }
                }

            }
        });


    });
</script>